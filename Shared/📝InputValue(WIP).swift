import Foundation

struct üìùInputValue { //MARK: Work in progress
    private var ‚ë†st: Int?
    private var ‚ë°nd: Int?
    private var ‚ë¢rd: Int?
    private var ‚ë£th: Int?
}

extension üìùInputValue {
    var result: Double {
        get throws {
            guard let ‚ë†st, let ‚ë°nd, let ‚ë¢rd else {
                throw Self.ResultError.incorrect
            }
            if let ‚ë£th {
                guard let ‚ì•alue = Double("\(‚ë†st)\(‚ë°nd).\(‚ë¢rd)\(‚ë£th)") else {
                    throw Self.ResultError.incorrect
                }
                return ‚ì•alue
            } else {
                guard let ‚ì•alue = Double("\(‚ë†st)\(‚ë°nd).\(‚ë¢rd)") else {
                    throw Self.ResultError.incorrect
                }
                return ‚ì•alue
            }
        }
    }
    enum ResultError: Error {
        case incorrect
    }
    var decimalSeparator: String {
        NumberFormatter().decimalSeparator
    }
    func description(_ ‚ì§nit: üìèDegreeUnit, _ ‚ì¢econdDecimalPlace: Bool) -> String {
        var ‚ì•alue = ""
        guard let ‚ë†st else {
            switch ‚ì§nit {
                case .‚ÑÉ: ‚ì•alue = "_"
                case .‚Ñâ: ‚ì•alue = " _"
            }
            ‚ì•alue += " \(self.decimalSeparator) "
            if ‚ì¢econdDecimalPlace { ‚ì•alue += " " }
            return ‚ì•alue
        }
        if ‚ì§nit == .‚Ñâ, ‚ë†st == 9 {
            ‚ì•alue = " 9"
        } else {
            ‚ì•alue = "\(‚ë†st)"
        }
        guard let ‚ë°nd else {
            ‚ì•alue += "_\(self.decimalSeparator) "
            if ‚ì¢econdDecimalPlace { ‚ì•alue += " " }
            return ‚ì•alue
        }
        ‚ì•alue += "\(‚ë°nd)"
        ‚ì•alue = self.decimalSeparator
        guard let ‚ë¢rd else {
            ‚ì•alue += "_"
            if ‚ì¢econdDecimalPlace { ‚ì•alue += " " }
            return ‚ì•alue
        }
        ‚ì•alue += "\(‚ë¢rd)"
        if ‚ì¢econdDecimalPlace {
            if let ‚ë£th {
                return ‚ì•alue + "\(‚ë£th)" + ‚ì§nit.rawValue
            } else {
                return ‚ì•alue + "_" + ‚ì§nit.rawValue
            }
        } else {
            return ‚ì•alue + ‚ì§nit.rawValue
        }
    }
    mutating func set(_ ‚ì•alue: Int) {
        if self.‚ë†st == nil {
            self.‚ë†st = ‚ì•alue
        } else if self.‚ë°nd == nil {
            self.‚ë°nd = ‚ì•alue
        } else if self.‚ë¢rd == nil {
            self.‚ë¢rd = ‚ì•alue
        } else if self.‚ë£th == nil {
            self.‚ë£th = ‚ì•alue
        } else {
            assertionFailure()
        }
    }
    mutating func delete() {
        if self.‚ë£th != nil {
            self.‚ë£th = nil
        } else if self.‚ë¢rd != nil {
            self.‚ë¢rd = nil
        } else if self.‚ë°nd != nil {
            self.‚ë°nd = nil
        } else if self.‚ë†st != nil {
            self.‚ë†st = nil
        } else {
            assertionFailure()
        }
    }
    mutating func reset(_ ‚ì§nit: üìèDegreeUnit) {
        self = Self(‚ì§nit)
    }
    func satisfyResult() -> Bool {
        self.‚ë†st != nil
        && self.‚ë°nd != nil
        && self.‚ë¢rd != nil
    }
    func satisfyAutoComplete(_ ‚ìêbleSecondDecimalPlace: Bool) -> Bool {
        if self.satisfyResult() {
            if ‚ìêbleSecondDecimalPlace {
                self.‚ë£th != nil
            } else {
                true
            }
        } else {
            false
        }
    }
    init(_ ‚ì§nit: üìèDegreeUnit) {
        switch ‚ì§nit {
            case .‚ÑÉ: self.‚ë†st = 3
            case .‚Ñâ: self.‚ë†st = 9
        }
    }
}
